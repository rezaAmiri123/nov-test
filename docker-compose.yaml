version: "3.8"

services:
  # publisher:
  #   # container_name: service_user
  #   build:
  #     context: publisher_service/
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8080:8080"
  #   restart: always
  #   depends_on:
  #     - postgesql
  #     - nats
  #   networks: [ "nov" ]

  # subscriber:
  #   build:
  #     context: subscriber_service/
  #     dockerfile: Dockerfile
  #   ports:
  #     - "6080:6080"
  #   restart: always
  #   depends_on:
  #     - postgesql
  #     - nats
  #   networks: [ "nov" ]
  postgesql:
    image: postgres:12-alpine
    container_name: nov_postgesql
    ports:
      - "5432:5432"
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=microservice
    volumes:
      - nov:/var/lib/postgresql/data
    networks: [ "nov" ]
  nats:
    image: nats
    ports:
      - "8222:8222"
      - "6222:6222"
      - "4222:4222"
    command: "--cluster_name NATS --cluster nats://0.0.0.0:6222 --http_port 8222 "
    networks: ["nov"]
  rabbitmq:
    # There is a prebuilt RabbitMQ image; see
    # https://hub.docker.com/_/rabbitmq/ for details.
    # This variant is built on Alpine Linux (it's smaller) and includes
    # the management UI.
    image: 'rabbitmq:3.6-management-alpine'
    restart: always
    ports:
      # The standard AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"

    # Run this container on a private network for this application.
    # This is necessary for magic Docker DNS to work: other containers
    # also running on this network will see a host name "rabbitmq"
    # (the name of this section) and the internal port 5672, even though
    # that's not explicitly published above.
    networks: ["nov"]

volumes:
  nov:

networks:
  nov:
    name: nov
